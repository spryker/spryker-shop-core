{% extends model('component') %}

{% define config = {
    name: 'packaging-unit-quantity-selector',
    tag: 'packaging-unit-quantity-selector',
} %}

{% define data = {
    salesUnits: required,
    productPackagingUnit: required,
    product: required,
    json: required,
    quantityOptions: [],
    leadProductSalesUnits: [],
    isAddToCartDisabled: false,
    packagingUnitIsAmountVariable: false,
    packagingUnitIsSelfLead: false,
    minQuantityInBaseUnit: '',
    minQuantityInSalesUnits: '',
    numberFormatConfig: {},
} %}

{# @deprecated property 'decimal-separator' is deprecated. #}
{% define attributes = {
    json: data.json,
    'decimal-separator': data.numberFormatConfig['decimal-separator'] | default('.'),
} %}

{% set salesUnitCount = data.salesUnits | length %}

{% block body %}
    {% set leftColumnModifierClass = salesUnitCount ? 'col--sm-7' : 'col--sm-5' %}
    {% set rightColumnModifierClass = salesUnitCount ? 'col--sm-4' : 'col--sm-6' %}

    <div class="{{ config.jsName }}__product-packaging-new-price-block is-hidden">
        <span>{{ 'measurement_units.new-price' | trans }}:</span>
        <div class="{{ config.jsName }}__product-packaging-new-price-value-block"></div>
        <hr>
    </div>
    <input class="{{ config.jsName }}__item-base-price" type="hidden" value="{{ data.product.price }}">
    <input class="{{ config.jsName }}__item-money-symbol" type="hidden" value="{{ moneySymbol() }}">

    <div class="grid grid--bottom grid--justify">
        <div class="col {{ leftColumnModifierClass }}">
            {{ 'cart.item_quantity' | trans }}

            {% if salesUnitCount %}
                {% block salesInput %}
                    {% include molecule('formatted-number-input') with {
                        modifiers: ['expand'],
                        class: config.jsName ~ '__formatted-sales-unit-quantity',
                        data: {
                            inputName: 'sales-unit-quantity',
                            inputValue: data.minQuantityInBaseUnit,
                            inputExtraClasses: config.jsName ~ '__sales-unit-quantity',
                        },
                        attributes: data.numberFormatConfig,
                    } only %}
                {% endblock %}
                <input class="{{ config.jsName }}__base-unit-quantity" type="hidden"
                       value="{{ data.minQuantityInBaseUnit }}" name="quantity">
            {% else %}
                {% embed atom('select') with {
                    modifiers: ['expand'],
                    data: {
                        options: data.quantityOptions,
                    },
                    attributes: {
                        name: 'quantity',
                    }
                } only %}
                    {% block selectClass %}js-volume-price__quantity{% endblock %}
                {% endembed %}
            {% endif %}
        </div>

        <div class="col {{ rightColumnModifierClass }}">
            {% if salesUnitCount > 1 and data.packagingUnitIsSelfLead == false %}
                <label>
                    {{ 'product.measurement.sales_unit' | trans }}
                    {% embed atom('select') with {
                        modifiers: ['expand'],
                        attributes: {
                            name: 'id-product-measurement-sales-unit',
                        },
                        embed: {
                            salesUnits: data.salesUnits,
                            jsName: config.jsName,
                        },
                    } only %}
                        {% block selectClass %}{{ embed.jsName }}__select-measurement-unit{% endblock %}

                        {% block options %}
                            {% for salesUnit in embed.salesUnits %}
                                <option value="{{ salesUnit.idProductMeasurementSalesUnit }}" {{ salesUnit.isDefault ? 'selected' }}>{{ salesUnit.productMeasurementUnit.name | trans }}</option>
                            {% endfor %}
                        {% endblock %}
                    {% endembed %}
                </label>
            {% endif %}

            {% if salesUnitCount == 1 and data.packagingUnitIsSelfLead == false %}
                {{ data.salesUnits[0].productMeasurementUnit.name | trans }}
                <input type="hidden" name="id-product-measurement-sales-unit"
                       value="{{ data.salesUnits[0].idProductMeasurementSalesUnit }}">
            {% endif %}

            {% if not salesUnitCount %}
                <button type="submit" class="{{ config.jsName }}__add-to-cart-button button button--success button--expand"
                        data-init-single-click {{ data.isAddToCartDisabled ? 'disabled' }} {{ qa('add-to-cart-button') }}>
                    {% include atom('icon') with {
                        data: {
                            name: 'cart-plus',
                        },
                    } only %}
                    {{ 'page.detail.add-to-cart' | trans }}
                </button>
            {% endif %}
        </div>
    </div>

    <div class="{{ config.jsName }}__measurement-unit-choice text-small spacing-y is-hidden">
        <div class="{{ config.jsName }}__quantity-between-units is-hidden">
            <span>{{ "measurement_units.recommendation.between-units-info" | trans }}
                (<span class="{{ config.jsName }}__current-choice"></span>)
            </span>
        </div>
        <div class="{{ config.jsName }}__minimum-quantity is-hidden">
            <span>{{ "measurement_units.recommendation.min-violation" | trans }}</span>
        </div>
        <div class="{{ config.jsName }}__maximum-quantity is-hidden">
            <span>{{ "measurement_units.recommendation.max-violation" | trans }}</span>
        </div>

        <div class="{{ config.jsName }}__measurement-unit-choices">
            <span>{{ "measurement_units.recommendation.suggestion" | trans }}:</span>
            <div class="{{ config.jsName }}__list"></div>
        </div>
    </div>

    <div class="grid grid--bottom grid--justify">
        {% if data.productPackagingUnit and salesUnitCount %}
            {% set defaultAmount = (data.productPackagingUnit.amountMin and
                data.productPackagingUnit.defaultAmount.toFloat() < data.productPackagingUnit.amountMin.toFloat()) ?
                data.productPackagingUnit.amountMin :
                data.productPackagingUnit.defaultAmount %}

            <div class="col {{ leftColumnModifierClass }}">
                <label>
                    {{ 'packaging_units.cart.amount' | trans }}

                    {% block amountInput %}
                        {% include molecule('formatted-number-input') with {
                            modifiers: ['expand'],
                            class: config.jsName ~ '__formatted-user-amount',
                            data: {
                                inputName: 'amount-sales-unit[' ~ data.product.sku ~ ']',
                                inputValue: defaultAmount,
                                inputAttributes: {
                                    min: data.productPackagingUnit.amountMin,
                                    max: data.productPackagingUnit.amountMax,
                                    step: data.productPackagingUnit.amountInterval,
                                    disabled: not data.packagingUnitIsAmountVariable,
                                },
                                inputExtraClasses: config.jsName ~ '__user-amount',
                            },
                            attributes: data.numberFormatConfig,
                        } only %}
                    {% endblock %}
                    <input class="{{ config.jsName }}__default-amount" type="hidden" value="{{ defaultAmount }}">
                    <input class="{{ config.jsName }}__amount" type="hidden" value="{{ defaultAmount }}"
                           name="amount[{{ data.product.sku }}]">
                </label>
            </div>
        {% endif %}

        <div class="col {{ rightColumnModifierClass }}">
            {% set isProductSalesUnitsMultiple = salesUnitCount and data.leadProductSalesUnits | length > 1 %}
            {% set isProductSalesUnitSingle = salesUnitCount and data.leadProductSalesUnits | length == 1 %}
            {% if isProductSalesUnitsMultiple %}
                <label>
                    {{ 'product.measurement.sales_unit' | trans }}
                    {% embed atom('select') with {
                        modifiers: ['expand'],
                        attributes: {
                            name: 'amount-id-product-measurement-sales-unit[' ~ data.product.sku ~ ']',
                        },
                        embed: {
                            jsName: config.jsName,
                            salesUnits: data.leadProductSalesUnits,
                        },
                    } only %}
                        {% block selectClass %}{{ embed.jsName }}__select-lead-measurement-unit{% endblock %}

                        {% block options %}
                            {% for salesUnit in embed.salesUnits %}
                                <option value="{{ salesUnit.idProductMeasurementSalesUnit }}" {{ salesUnit.isDefault ? 'selected' }}>{{ salesUnit.productMeasurementUnit.name | trans }}</option>
                            {% endfor %}
                        {% endblock %}
                    {% endembed %}
                </label>
            {% endif %}

            {% if isProductSalesUnitSingle %}
                {{ data.leadProductSalesUnits[0].productMeasurementUnit.name | trans }}
                <input type="hidden" name="amount-id-product-measurement-sales-unit[{{ data.product.sku }}]"
                       value="{{ data.leadProductSalesUnits[0].idProductMeasurementSalesUnit }}">
            {% endif %}
        </div>
    </div>

    <div class="spacing-bottom spacing-bottom--big">
        {% if salesUnitCount %}
            <div class="{{ config.jsName }}__packaging-unit-choice text-small is-hidden">
                <hr>

                <div class="{{ config.jsName }}__amount-between-units is-hidden">
                    <span>{{ "packaging_units.recommendation.between-units-info" | trans }}
                        (<span class="{{ config.jsName }}__amount-current-choice"></span>)
                    </span>
                </div>

                <div class="{{ config.jsName }}__packaging-amount-min is-hidden">
                    <span>{{ "packaging-units.recommendation.amount-min-violation" | trans }}</span>
                </div>
                <div class="{{ config.jsName }}__packaging-amount-max is-hidden">
                    <span>{{ "packaging-units.recommendation.amount-max-violation" | trans }}</span>
                </div>
                <div class="{{ config.jsName }}__packaging-amount-interval is-hidden">
                    <span>{{ "packaging-units.recommendation.amount-interval-violation" | trans }}</span>
                </div>

                <div class="{{ config.jsName }}__packaging-unit-choices">
                    <span>{{ "packaging_units.recommendation.suggestion" | trans }}</span>
                    <div class="{{ config.jsName }}__list"></div>
                </div>
            </div>

            <hr>
            <button type="submit" class="{{ config.jsName }}__add-to-cart-button button button--success button--expand"
                    data-init-single-click {{ data.isAddToCartDisabled ? 'disabled' }} {{ qa('add-to-cart-button') }}>
                {% include atom('icon') with {
                    data: {
                        name: 'cart-plus'
                    }
                } only %}
                {{ 'page.detail.add-to-cart' | trans }}
            </button>
        {% endif %}

        {% set translations = [] %}
        {% for key, salesUnit in data.salesUnits %}
            {% set translations = translations | merge({(salesUnit.productMeasurementUnit.code) : (salesUnit.productMeasurementUnit.name | trans)}) %}
        {% endfor %}

        <script type="application/json" class="{{ config.jsName }}__measurement-unit-translation">{{ translations | json_encode | raw }}</script>
    </div>
{% endblock %}
