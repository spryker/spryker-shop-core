{# @var order \Generated\Shared\Transfer\OrderTransfer #}

{% extends model('component') %}

{% define config = {
    name: 'order-table',
} %}

{% define data = {
    orders: required,
    ordersAggregatedItemStateDisplayNames: [],
    orderSearchForm: null,
    isOrderSearchEnabled: false,
    isOrderSearchOrderItemsVisible: true,
    filterFields: [],
    jsPrefix: '',
} %}

{% block extraClass %}
    is-scrollable
{% endblock %}

{% set isCustomerDataColumnsVisible = data.orderSearchForm.vars.value.filters.companyBusinessUnit is defined
    and data.orderSearchForm.vars.value.filters.companyBusinessUnit is not empty
%}

{%- import _self as macros -%}

{% block body %}
    <table class="table table--expand">
        <thead>
            <tr>
                <th {{ macros.sortingAttributes('orderReference', data.orderSearchForm, data.jsPrefix) }}>
                    {{ 'customer.order.reference' | trans }}
                    {{ macros.sortingIcon('orderReference', data.orderSearchForm) }}
                </th>
                <th {{ macros.sortingAttributes('date', data.orderSearchForm, data.jsPrefix) }}>
                    {{ 'customer.order.date' | trans }}
                    {{ macros.sortingIcon('date', data.orderSearchForm) }}
                </th>
                {% if data.isOrderSearchEnabled and isCustomerDataColumnsVisible %}
                    <th {{ macros.sortingAttributes('customerName', data.orderSearchForm, data.jsPrefix) }}>
                        {{ 'customer.order.company_user' | trans }}
                        {{ macros.sortingIcon('customerName', data.orderSearchForm) }}
                    </th>
                    <th {{ macros.sortingAttributes('customerEmail', data.orderSearchForm, data.jsPrefix) }}>
                        {{ 'customer.order.email' | trans }}
                        {{ macros.sortingIcon('customerEmail', data.orderSearchForm) }}
                    </th>
                {% endif %}
                {% if data.isOrderSearchEnabled and data.isOrderSearchOrderItemsVisible %}
                    <th>{{ 'customer.order.number_of_items' | trans }}</th>
                {% endif %}
                <th>{{ 'customer.order.total' | trans }}</th>
                <th>{{ 'customer.order.items_state' | trans }}</th>
                <th>{{ 'customer.table.actions' | trans }}</th>
            </tr>
        </thead>
        <tbody>
            {% if data.orders is empty %}
                {% block noOrder %}
                    <tr>
                        <td colspan="100">{{ 'customer.account.no_order' | trans }}</td>
                    </tr>
                {% endblock %}
            {% endif %}

            {% for order in data.orders %}
                <tr>
                    <td>{{ order.orderReference }}</td>
                    <td>{{ date(order.createdAt) | formatDateTime }}</td>
                    {% if data.isOrderSearchEnabled and isCustomerDataColumnsVisible %}
                        <td>{{ order.firstName ~ ' ' ~ order.lastName }}</td>
                        <td>{{ order.email }}</td>
                    {% endif %}
                    {% if data.isOrderSearchEnabled and data.isOrderSearchOrderItemsVisible %}
                        {% set itemCount = order.items.count %}
                        {% set label = (itemCount == 1) ? 'customer.order.item' : 'customer.order.items' %}

                        <td>{{ itemCount }}&nbsp;{{ label | trans }}</td>
                    {% endif %}
                    <td>{{ order.totals.grandTotal | default(0) | money(true, order.currencyIsoCode) }}</td>
                    <td>
                        {% block stateWrapper %}
                            {% if order.orderReference and data.ordersAggregatedItemStateDisplayNames[order.orderReference] %}
                                {% for displayName, stateNames in data.ordersAggregatedItemStateDisplayNames[order.orderReference] %}
                                    {% block state %}
                                        {% include molecule('status') with {
                                            data: {
                                                label: displayName | trans,
                                                status: stateNames | first | replace({' ': '-'}) | lower,
                                            },
                                        } only %}
                                    {% endblock %}
                                {% endfor %}
                            {% endif %}
                        {% endblock %}
                    </td>
                    <td>
                        {% block actions %}
                            <ul class="menu menu--inline">
                                <li class="menu__item">
                                    <a href="{{ path('customer/order/details', {'id': order.idSalesOrder}) }}">
                                        {{ 'customer.order.view_order' | trans }}
                                    </a>
                                </li>

                                {% if widgetExists('CustomerReorderWidgetPlugin') %}
                                    <li class="menu__item">
                                        {% include molecule('remote-form-submit') with {
                                            data: {
                                                label: 'customer.order.reorder' | trans,
                                                buttonClass: 'link',
                                            },
                                            attributes: {
                                                'form-name': 'customerReorderWidgetForm_' ~ order.idSalesOrder,
                                                'form-action': path('customer/order/reorder', {'idSalesOrder': order.idSalesOrder}),
                                                'field-id': 'customerReorderWidgetForm__token_' ~ order.idSalesOrder,
                                                'field-name': 'customerReorderWidgetForm[_token]',
                                                'field-value': csrf_token('customerReorderWidgetForm'),
                                            },
                                        } only %}
                                    </li>
                                {% else %}
                                    {% include molecule('customer-reorder-link', 'CustomerReorderWidget') ignore missing with {
                                        data: {
                                            idSalesOrder: order.idSalesOrder,
                                        },
                                    } only %}
                                {% endif %}

                                {% embed molecule('return-create-link', 'SalesReturnPage') ignore missing with {
                                    data: {
                                        orderReference: order.orderReference,
                                    },
                                } only %}
                                    {% block component %}
                                        <li class="menu__item">
                                            {{ parent() }}
                                        </li>
                                    {% endblock %}
                                {% endembed %}

                                {% block orderCancelButton %}
                                    {% widget 'OrderCancelButtonWidget'  args [order, app.request.requestUri] only %}
                                        {% block body %}
                                            <li class="menu__item">
                                                {% include molecule('remote-form-submit') with {
                                                    data: {
                                                        label: 'order_cancel_widget.cancel_order' | trans,
                                                        buttonClass: buttonClasses,
                                                    },
                                                    attributes: {
                                                        'form-name': 'orderCancelForm_' ~ data.order.idSalesOrder,
                                                        'form-action': path('order/cancel', {
                                                            'id-sales-order': data.order.idSalesOrder,
                                                            'return-url': data.returnUrl,
                                                        }),
                                                        'field-id': 'orderCancelForm__token_' ~ data.order.idSalesOrder,
                                                        'field-name': 'orderCancelForm[_token]',
                                                        'field-value': csrf_token('orderCancelForm'),
                                                    },
                                                } only %}
                                            </li>
                                        {% endblock %}
                                    {% endwidget %}
                                {% endblock %}
                            </ul>
                        {% endblock %}
                    </td>
                </tr>
                {% if data.isOrderSearchEnabled and data.isOrderSearchOrderItemsVisible %}
                    <tr>
                        <td colspan="100">
                            {% include molecule('order-table-products', 'CustomerPage') with {
                                data: {
                                    items: order.items,
                                    priceMode: order.priceMode,
                                },
                            } only %}
                        </td>
                    </tr>
                {% endif %}
            {% endfor %}
        </tbody>
    </table>

    {% if data.orderSearchForm %}
        {{ form_row(data.orderSearchForm.orderBy, {
            attr: {
                class: data.jsPrefix ~ 'orderBy-target',
            }})
        }}

        {{ form_row(data.orderSearchForm.orderDirection, {
            attr: {
                class: data.jsPrefix ~ 'orderDirection-target',
            }})
        }}

        {% include molecule('form-sort-submitter', 'CustomerPage') with {
            attributes: {
                'form-class-name': data.jsPrefix ~ 'form',
                'trigger-class-name': data.jsPrefix ~ 'sort-trigger',
                'target-sort-by-class-name': data.jsPrefix ~ 'orderBy-target',
                'target-sort-direction-class-name': data.jsPrefix ~ 'orderDirection-target',
            },
        } only %}
    {% endif %}

    {%- macro sortingAttributes(orderByValue, orderSearchForm, jsPrefix, class='') -%}
        {% if orderSearchForm %}
            {% set orderDirection = orderSearchForm.orderDirection.vars.value %}

            class="{{ class }} {{ jsPrefix }}sort-trigger"
            sort-by="{{ orderByValue }}"
            sort-direction="{{ (orderDirection == 'ASC') ? 'DESC' : 'ASC' }}"
        {% endif %}
    {%- endmacro -%}

    {%- macro sortingIcon(orderByValue, orderSearchForm) -%}
        {% if orderSearchForm %}
            {% set orderDirection = orderSearchForm.orderDirection.vars.value %}
            {% set orderBy = orderSearchForm.orderBy.vars.value %}
            {% set iconName = 'sort-none' %}

            {% if orderBy == orderByValue %}
                {% set iconName = (orderDirection == 'ASC') ? 'sort-asc' : 'sort-desc' %}
            {% endif %}

            {% include atom('icon') with {
                modifiers: ['small'],
                data: {
                    name: iconName,
                },
            } only %}
        {% endif %}
    {%- endmacro -%}
{% endblock %}
