{% extends template('widget') %}

{#
    @deprecated property "data.formAddressTransfer" is deprecated.
    @deprecated property "data.isCustomAddress" is deprecated.
    @deprecated property "data.currentCompanyBusinessUnitAddress" is deprecated.
#}

{% define data = {
    formType: _widget.formType,
    currentAddressId: _widget.formAddressTransfer.idCustomerAddress | default,
    currentCompanyUnitAddressId: _widget.formAddressTransfer.idCompanyUnitAddress | default,
    formAddressTransfer: _widget.formAddressTransfer,
    addresses: _widget.addresses,
    customerAddresses: _widget.customerAddresses,
    companyBusinessUnitAddresses: _widget.companyBusinessUnitAddresses,
    isMultipleShipmentEnabled: false,
    itemShippingTriggerJsClass: null,
    items: null,
    jsAddressClass: '',
    isCustomAddress: app.request.get('customAddress')[_widget.formType]  | default(not _widget.formAddressTransfer.idCustomerAddress),
    currentCompanyBusinessUnitAddress: _widget.currentCompanyBusinessUnitAddress,
    isCurrentAddressEmpty: _widget.isCurrentAddressEmpty,
    hasPreselectedOption: false,
} %}

{% block body %}
    {% set defaultAddressKey = null %}
    {% set optionValueDeliverToMultipleAddresses = '-1' %}
    {% set shippingAddress = 'shippingAddress' %}
    {% set billingAddress = 'billingAddress' %}
    {% set fullAddresses = data.customerAddresses ? data.customerAddresses | merge(data.companyBusinessUnitAddresses) : data.companyBusinessUnitAddresses %}
    {% set isShippingAddressFormType = data.formType == shippingAddress %}
    {% set isBillingAddressFormType = data.formType == billingAddress %}
    {% set addressSelectLabel = isShippingAddressFormType ? 'page.checkout.address.delivery.address_select' : 'page.checkout.address.billing.address_select' %}

    {% if fullAddresses %}
        {% for address in fullAddresses %}
            {% set canUseCurrentAsDefaultCustomerAddress = not data.currentAddressId and not data.currentCompanyUnitAddressId and isShippingAddressFormType and address.isDefaultShipping and data.isCurrentAddressEmpty %}
            {% set canUseCurrentAsDefaultCompanyUnitAddress = not data.currentAddressId and not data.currentCompanyUnitAddressId and isBillingAddressFormType and address.isDefaultBilling and data.isCurrentAddressEmpty %}
            {% set isCurrentCustomerAddress = data.currentAddressId and data.currentAddressId == address.idCustomerAddress %}
            {% set isCurrentCompanyUnitAddress = data.currentCompanyUnitAddressId and data.currentCompanyUnitAddressId == address.idCompanyUnitAddress %}
            {% set isCurrentValueDeliverToMultipleAddresses = data.currentAddressId == optionValueDeliverToMultipleAddresses %}

            {% if canUseCurrentAsDefaultCustomerAddress or canUseCurrentAsDefaultCompanyUnitAddress
                    or isCurrentCustomerAddress or isCurrentCompanyUnitAddress
            %}
                {% set defaultAddressKey = address.key %}
            {% endif %}

            {% if isCurrentValueDeliverToMultipleAddresses %}
                {% set defaultAddressKey = optionValueDeliverToMultipleAddresses %}
            {% endif %}
        {% endfor %}
    {% endif %}

    <label>{{ addressSelectLabel | trans }}</label><br>

    {% embed atom('select') with {
        class: 'spacing-bottom',
        attributes: {
            name: 'checkout-full-addresses',
        },
        data: {
            isGrouped: true,
        },
        embed: {
            customerAddresses: data.customerAddresses,
            companyBusinessUnitAddresses: data.companyBusinessUnitAddresses,
            formType: data.formType,
            defaultAddressKey: defaultAddressKey,
            currentAddressId: data.currentAddressId,
            isMultipleShipmentEnabled: data.isMultipleShipmentEnabled,
            optionValueDeliverToMultipleAddresses: optionValueDeliverToMultipleAddresses,
            itemShippingTriggerJsClass: data.itemShippingTriggerJsClass,
            items: data.items,
            shippingAddress: shippingAddress,
            jsAddressClass: data.jsAddressClass,
            hasPreselectedOption: data.hasPreselectedOption,
        },
    } only %}
        {% block selectClass -%}
            {{ embed.jsAddressClass ? embed.jsAddressClass ~ '__form-select-' ~ embed.formType }}
            {{ embed.itemShippingTriggerJsClass ? embed.itemShippingTriggerJsClass }}
        {%- endblock %}
        {% block option %}
            {% set isSelected = embed.defaultAddressKey == address.key %}
            {% set fullName = '%s %s %s, %s %s, %s %s' | format(
                address.salutation,
                address.firstName,
                address.lastName,
                address.address1,
                address.address2,
                address.zipCode,
                address.city)
            %}
            {% define option = {
                selected: not embed.hasPreselectedOption ? isSelected,
                value: address.key,
                label: fullName
            } %}
            {{ parent() }}
        {% endblock %}
        {% block optionsGroup %}
            {% if embed.hasPreselectedOption %}
                <option value="" disabled selected>{{ 'checkout.step.address.select_address' | trans }}</option>
            {% endif %}

            <option value="0">{{ 'company.account.add_new_address' | trans }}</option>

            {% if embed.customerAddresses %}
                <optgroup label="{{ 'page.checkout.address.option_group.customer' | trans }}">
                    {% for address in embed.customerAddresses %}
                        {{ block('option') }}
                    {% endfor %}
                </optgroup>
            {% endif %}

            {% if embed.companyBusinessUnitAddresses %}
                <optgroup label="{{ 'page.checkout.address.option_group.company_business_unit' | trans }}">
                    {% for address in embed.companyBusinessUnitAddresses %}
                        {{ block('option') }}
                    {% endfor %}
                </optgroup>
            {% endif %}

            {% if embed.formType == embed.shippingAddress and embed.isMultipleShipmentEnabled %}
                <option value="{{ embed.optionValueDeliverToMultipleAddresses }}" {% if embed.defaultAddressKey == embed.optionValueDeliverToMultipleAddresses %}selected{% endif %}>
                    {{ 'customer.account.deliver_to_multiple_addresses' | trans }}
                </option>
            {% endif %}
        {% endblock %}
    {% endembed %}

    {% block addressHandler %}
        {% include molecule('company-business-unit-address-handler', 'CompanyWidget') with {
            attributes: {
                'form-selector': '.' ~ data.jsAddressClass ~ '__form-handler-' ~ data.formType,
                'data-selector': '.' ~ data.jsAddressClass ~ '__form-select-' ~ data.formType,
                'shipping-address-toggler-selector': '.' ~ data.jsAddressClass ~ '__form-select-' ~ shippingAddress,
                'default-address-selector': '.' ~ data.jsAddressClass ~ '__default-address-' ~ data.formType,
                'address-hidden-input-selector': '[name="addressesForm[' ~ data.formType ~ '][id_customer_address]"]',
                'company-address-hidden-input-selector': '[name="addressesForm[' ~ data.formType ~ '][id_company_unit_address]"]',
                'shipping-address-hidden-input-selector': '[name="addressesForm[' ~ shippingAddress ~ '][id_customer_address]"]',
                'shipping-company-address-hidden-input-selector': '[name="addressesForm[' ~ shippingAddress ~ '][id_company_unit_address]"]',
                'addresses': data.addresses,
                'toggle-option-value': optionValueDeliverToMultipleAddresses,
            },
        } only %}
    {% endblock %}

    {% block hiddenFields %}
        <input type="hidden" name="addressesForm[{{ data.formType }}][id_customer_address]">
        <input type="hidden" name="addressesForm[{{ data.formType }}][id_company_unit_address]">
        <input type="hidden" class="{{ data.jsAddressClass }}__default-address-{{ data.formType }}" value="{{ defaultAddressKey }}">
    {% endblock %}
{% endblock %}
