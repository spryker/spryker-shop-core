{# @var data.product \Generated\Shared\Transfer\ProductViewTransfer #}

{% extends model('component') %}

{% define config = {
    name: 'product-configurator',
    tag: 'section'
} %}

{% define data = {
    product: required,
    maxQuantity: 10,
} %}

{% set options = [] %}
{% set brand = data.product.attributes.brand | default %}
{% set sku = data.product.sku %}
{% set availabilityWidget = '' %}
{% set isProductAbstract = data.product.idProductConcrete is empty %}
{% set isDisabled = data.product.idProductConcrete is empty or data.product.price is empty %}
{% set isProductAvailable = true %}

{% for index in 1..data.maxQuantity %}
    {% set options = options | merge([{
        label: index,
        value: index,
    }]) %}
{% endfor %}

{% if widgetExists('AvailabilityWidgetPlugin') %} {# @deprecated Use molecule('availability-product', 'AvailabilityWidget') instead of AvailabilityWidgetPlugin. #}
    {% set isAvailable = widgetBlock('AvailabilityWidgetPlugin', 'isAvailable', data.product) %}
    {% set isDisabled = not isAvailable or isDisabled %}
{% else %}
    {% set isAvailable = data.product.idProductConcrete and data.product.available %}
    {% set isDisabled = not isAvailable or isDisabled %}
{% endif %}

{% set productDiscontinuedNoteWidget = findWidget('ProductDiscontinuedNoteWidget', [sku]) %}
{% set isDiscontinued = productDiscontinuedNoteWidget.isDiscontinued ?? widgetBlock('ProductDiscontinuedWidgetPlugin', 'isDiscontinued', sku) %} {# @deprecated Use productDiscontinuedNoteWidget instead of ProductDiscontinuedWidgetPlugin. #}
{% if isDiscontinued is not null %}
    {% set isDisabled = isDiscontinued or isDisabled %}
    {% set isProductAvailable = not isDiscontinued %}
{% endif %}

{% block body %}
    {% if brand is not empty %}
        <div class="title--h5"><small>{{ 'page.product.by' | trans }}</small> <span itemprop="brand">{{ brand }}</span></div>
    {% endif %}
    <small>{{ 'product.attribute.sku' | trans }}: <span itemprop="sku">{{ sku }}</span></small>

    <hr>

    {% widget 'CurrentProductPriceVolumeWidget' args [data.product.currentProductPrice] only %}
    {% elsewidget 'ProductPriceVolumeWidget' args [data.product] only %} {# @deprecated Use CurrentProductPriceVolumeWidget instead. #}
    {% elsewidget 'PriceProductVolumeWidgetPlugin' args [data.product] only %} {# @deprecated Use CurrentProductPriceVolumeWidget instead. #}
    {% nowidget %}
        {% if widgetExists('PriceWidgetPlugin') %}
            {{ widget('PriceWidgetPlugin', data.product) }}  {# @deprecated Use molecule('money-price') instead. #}
        {% else %}
            <p>
                {% include molecule('money-price') with {
                    data: {
                        amount: data.product.price,
                        originalAmount: data.product.prices.ORIGINAL | default,
                    }
                } only %}
            </p>
        {% endif %}
    {% endwidget %}

    {% widget 'ProductDetailPageReviewWidget' args [data.product.idProductAbstract] use view('pdp-review-rating', 'ProductReviewWidget') only %}
    {% nowidget %}
        {{ widgetBlock('ProductReviewWidgetPlugin', 'rating', data.product.idProductAbstract) }} {# @deprecated Use ProductDetailPageReviewWidget instead. #}
    {% endwidget %}

    {% block product_group_widget %}
        {% widget 'ProductGroupWidget' args [data.product.idProductAbstract] only %}
        {% elsewidget 'ProductGroupWidgetPlugin' args [data.product.idProductAbstract] only %} {# @deprecated Use ProductGroupWidget instead. #}
        {% endwidget %}
    {% endblock %}

    {% block bundleProducts %}
        {% widget 'ProductBundleProductDetailPageItemsListWidget' args [data.product] only %}
            {% block body %}
                <hr>
                {{ parent() }}
            {% endblock %}
        {% endwidget %}
    {% endblock %}

    {% block colors %}
        {% widget 'ProductGroupColorWidget' args [data.product.idProductAbstract, data.product.selectedAttributes ?? []] use view('product-detail-color-selector', 'ProductGroupWidget') only %}{% endwidget %}
    {% endblock %}

    {% embed molecule('variant-configurator', 'ProductDetailPage') with {
        data: {
            superAttributes: data.product.attributeMap.superAttributes,
            selectedAttributes: data.product.selectedAttributes,
            availableAttributes: data.product.availableAttributes,
        }
    } only %}
        {% block body %}<hr>{{parent()}}{% endblock %}
    {% endembed %}

    <hr>

    {% widget 'ProductConfigurationProductViewDisplayWidget' args [data.product] only %}{% endwidget %}

    {% widget 'ProductConfigurationProductDetailPageButtonWidget' args [data.product] only %}{% endwidget %}

    <hr>

    {% widget 'AddToCartFormWidget' args [config, data.product, isDisabled, options] only %}
        {% block embeddedData %}

            {% widget 'ProductOptionConfiguratorWidget' args [data.product] only %}
            {% elsewidget 'ProductOptionWidgetPlugin' args [data.product] only %} {# @deprecated Use ProductOptionConfiguratorWidget instead. #}
            {% endwidget %}

            {% if can('SeeAddToCartPermissionPlugin') %}
                {% widget 'ProductPackagingUnitWidget' args [data.product, data.isDisabled, data.options] only %}
                {% elsewidget 'ProductPackagingUnitWidgetPlugin' args [data.product, data.isDisabled, data.options] only %} {# @deprecated Use ProductPackagingUnitWidget instead. #}
                {% elsewidget 'ManageProductMeasurementUnitWidget' args [data.product, data.isDisabled, data.options] only %}
                {% elsewidget 'ProductMeasurementUnitWidgetPlugin' args [data.product, data.isDisabled, data.options] only %} {# @deprecated Use ManageProductMeasurementUnitWidget instead. #}
                {% nowidget %}
                    <div class="grid grid--bottom grid--justify">
                        <div class="col col--sm-5">
                            <label>
                                {{'cart.item_quantity' | trans}}
                                {% include atom('select') with {
                                    modifiers: ['expand'],
                                    data: {
                                        options: options,
                                    },
                                    attributes: {
                                        name: 'quantity',
                                        disabled: data.isDisabled,
                                    },
                                } only %}
                            </label>
                        </div>

                        <div class="col col--sm-6">
                            <button type="submit" class="button button--success button--expand" data-init-single-click {{ data.isDisabled ? 'disabled' : '' }} {{ qa('add-to-cart-button') }}>
                                {% include atom('icon') with {
                                    data: {
                                        name: 'cart-plus',
                                    },
                                } only %}
                                {{ 'page.detail.add-to-cart' | trans }}
                            </button>
                        </div>
                    </div>
                {% endwidget %}
            {% endif %}

            {% widget 'AddToMultiCartWidget' args [data.isDisabled] only %}
            {% elsewidget 'MultiCartWidgetPlugin' args [data.product, data.isDisabled] only %} {# @deprecated Use AddToMultiCartWidget instead. #}
            {% endwidget %}

            {% widget 'CartAddProductAsSeparateItemWidget' only %}{% endwidget %}

            {% block productOfferByMerchant %}
                {% set merchantProductOfferWidget = findWidget('MerchantProductOfferWidget', [data.product]) %}
                {% set productOffersCount = merchantProductOfferWidget ? merchantProductOfferWidget.productOffers | length : 0 %}
                {% set isRadioButtonVisible = productOffersCount > 0  %}
                {% set isChecked = merchantProductOfferWidget ? not merchantProductOfferWidget.productView.productOfferReference : true %}
                {% set merchantProductWidget = findWidget('MerchantProductWidget', [
                    data.product,
                    isRadioButtonVisible,
                    isChecked,
                ]) %}
                {% set hasMerchantProduct = merchantProductWidget.merchantProductView is defined %}

                {% block productOfferListByMerchant %}
                    {% widget merchantProductWidget %}{% endwidget %}
                    {% widget merchantProductOfferWidget with {
                        data: {
                            isTitleVisible: not hasMerchantProduct,
                        },
                        embed: {
                            hasMerchantProduct: hasMerchantProduct,
                            productOffersCount: merchantProductOfferWidget.productOffers | length,
                        },
                    } %}
                        {% block content %}
                            {% set isRadioButtonVisible = embed.productOffersCount > 1 or embed.hasMerchantProduct %}

                            {{ parent() }}
                        {% endblock %}
                    {% endwidget %}
                {% endblock %}
            {% endblock %}

            {% if widgetExists('AvailabilityWidgetPlugin') %}
                {{ widget('AvailabilityWidgetPlugin', data.product) }} {# @deprecated Use molecule('availability-product', 'AvailabilityWidget') instead. #}
            {% else %}
                {% include molecule('availability-product', 'AvailabilityWidget') ignore missing with {
                    data: {
                        idProductConcrete: data.product.idProductConcrete,
                        isAvailable: data.product.available,
                    },
                } only %}
            {% endif %}
        {% endblock %}
    {% endwidget %}

    {% if not isAvailable and not isProductAbstract %}
        {% widget 'AvailabilityNotificationSubscriptionWidget' args [data.product] only %}{% endwidget %}
    {% endif %}

    {% if can('SeeShoppingListPermissionPlugin') and isProductAvailable %}
        {% set isAddingToShoppingListDisabled = data.product.idProductConcrete is empty or data.product.price is null %}

        {% widget 'AddToShoppingListWidget' args [sku, isAddingToShoppingListDisabled, data.product] only %}
            {% block body %}
                <hr>
                {{ parent() }}
            {% endblock %}
        {% elsewidget 'ShoppingListWidgetPlugin' args [sku, isAddingToShoppingListDisabled] only %} {# @deprecated Use AddToShoppingListWidget instead. #}
            {% block body %}
                <hr>
                {{ parent() }}
            {% endblock %}
        {% endwidget %}
    {% endif %}

    {% if can('SeeWishlistPermissionPlugin') and isProductAvailable %}
        {% if widgetExists('WishlistWidgetPlugin') %}
            <hr>
            {{ widget('WishlistWidgetPlugin', data.product) }} {# @deprecated Use molecule('wishlist-selector', 'WishlistWidget') instead. #}
        {% else %}
            {% include molecule('wishlist-selector-product-detail-page', 'WishlistWidget') ignore missing with {
                data: {
                    product: data.product
                },
            } only %}
        {% endif %}
    {% endif %}

    {% widget 'ProductDiscontinuedNoteWidget' args [sku] only %}
    {% elsewidget 'ProductDiscontinuedWidgetPlugin' args [sku] only %} {# @deprecated Use ProductDiscontinuedNoteWidget instead. #}
    {% endwidget %}
{% endblock %}
