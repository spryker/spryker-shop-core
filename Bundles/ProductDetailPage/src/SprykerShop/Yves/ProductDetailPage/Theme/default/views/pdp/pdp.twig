{% extends template('page-critical-path') %}

{% define data = {
    product: _view.product,
    productUrl: _view.productUrl,
    requestReferer: app.request.headers.get('referer'),
    hostName: app.request.getSchemeAndHttpHost(),
    title: product.metaTitle | default(_view.product.name),
    metaTitle: _view.product.metaTitle | default(_view.product.name),
    metaDescription: _view.product.metaDescription | default,
    metaKeywords: _view.product.metaKeywords | default,
    productId: _view.product.idProductConcrete is not empty ? _view.product.idProductConcrete : _view.product.idProductAbstract,
    isNewCarouselRenderingEnabled: true,
} %}
{% block meta %}
    {{ parent() }}
    <link rel="canonical" href="{{ data.product.url }}" />
{% endblock %}

{% block headScripts %}
    {{ parent() }}

    {% widget 'AssetWidget' args ['pdp-header'] only %}
    {% endwidget %}
{% endblock %}

{% block breadcrumbs %}
    {% widget 'ProductBreadcrumbsWithCategoriesWidget' args [data.product, data.requestReferer] only %}
    {% elsewidget 'ProductCategoryWidgetPlugin' args [data.product] only %} {# @deprecated Use ProductBreadcrumbsWithCategoriesWidget instead. #}
    {% endwidget %}
{% endblock %}

{% block title %}
    <h1 class="title--h3">{{ data.product.name }}</h1>
{% endblock %}

{% block content %}
    <section itemscope itemtype="https://schema.org/Product">
        <meta itemprop="name" content="{{ data.product.name }}">
        <meta itemprop="url" content="{{ data.hostName }}{{ data.productUrl }}">
        <meta itemprop="sku" content="{{ data.product.sku }}">
        <meta itemprop="abstractSku" content="{{ data.product.abstractSku }}">

        <meta itemprop="productId" content="{{ data.product.sku }}">
        <meta itemprop="description" content="{{ data.product.metaDescription }}">
        {% if data.product.images.0.externalUrlLarge is defined %}
            <meta itemprop="image" content="{{ data.product.images.0.externalUrlLarge }}">
        {% endif %}

        {% if data.product.attributes.brand is defined %}
            <div itemprop="brand" itemscope itemtype="https://schema.org/Brand">
                <meta itemprop="name" content="{{ data.product.attributes.brand }}">
            </div>
        {% endif %}

        {% widget 'ProductSchemaOrgCategoryWidget' args [data.product] only %}{% endwidget %}
        <meta itemprop="gtin12" content="{{ data.product.attributes.upcs | default }}">

        <div class="grid">
            <div class="col col--sm-12 col--lg-7 col--xl-8">
                {% include molecule('product-carousel', 'ProductDetailPage') with {
                    class: 'box',
                    data: {
                        product: data.product,
                    }
                } only %}
            </div>

            <div class="col col--sm-12 col--lg-5 col--xl-4">
                {% include molecule('product-configurator', 'ProductDetailPage') with {
                    class: 'box',
                    data: {
                        product: data.product,
                    }
                } only %}
            </div>
        </div>

        {% widget 'ProductAlternativeListWidget' args [data.product] with {
            data: {
                isNewCarouselRenderingEnabled: data.isNewCarouselRenderingEnabled,
            }
        } only %}
        {% elsewidget 'ProductAlternativeWidgetPlugin' args [data.product] only %} {# @deprecated Use ProductAlternativeListWidget instead. #}
        {% endwidget %}

        {% include molecule('product-detail', 'ProductDetailPage') with {
            class: 'box',
            data: {
                description: data.product.description,
                attributes: data.product.attributes,
            }
        } only %}

        {% widget 'ProductReplacementForListWidget' args [data.product.sku] with {
            data: {
                isNewCarouselRenderingEnabled: data.isNewCarouselRenderingEnabled,
            }
        } only %}
        {% elsewidget 'ProductReplacementForWidgetPlugin' args [data.product.sku] only %} {# @deprecated Use ProductReplacementForListWidget instead. #}
        {% endwidget %}

        {% widget 'ProductDetailPageReviewWidget' args [data.product.idProductAbstract] only %}
        {% elsewidget 'ProductReviewWidgetPlugin' args [data.product.idProductAbstract] only %} {# @deprecated Use ProductDetailPageReviewWidget instead. #}
        {% endwidget %}

        {% widget 'SimilarProductsWidget' args [data.product] with {
            data: {
                isNewCarouselRenderingEnabled: data.isNewCarouselRenderingEnabled,
            }
        } only %}
        {% elsewidget 'SimilarProductsWidgetPlugin' args [data.product] only %} {# @deprecated Use SimilarProductsWidget instead. #}
        {% endwidget %}

        {% block cmsContent %}
            {% if widgetExists('ProductCmsBlockWidgetPlugin') %}
                {{ widget('ProductCmsBlockWidgetPlugin', data.product) }} {# @deprecated Use molecule('product-cms-block', 'CmsBlockWidget') instead. #}
            {% else %}
                {% include molecule('product-cms-block', 'CmsBlockWidget') ignore missing with {
                    class: 'box',
                    data: {
                        idProductAbstract: data.product.idProductAbstract,
                    }
                } only %}
            {% endif %}
        {% endblock %}
    </section>
{% endblock %}

{% block eventTracker %}
    {% set sku = data.product.idProductConcrete ? data.product.sku : (data.product.attributeMap is defined ? data.product.attributeMap.productConcreteIds | keys | first) | default(data.product.sku) %}

    {% set events = {
        list: events.list | merge([
            {
                event: 'ADD_TO_WISHLIST',
                name: 'click',
                triggers: [
                    {
                        selector: '.wishlist-selector-default__form button',
                    },
                ],
            },
            {
                event: 'ADD_TO_SHOPPING_LIST',
                name: 'click',
                triggers: [
                    {
                        selector: '.js-add-to-shopping-list',
                    },
                ],
            },
            {
                event: 'ADD_TO_CART',
                name: 'click',
                triggers: [
                    {
                        selector: 'body:has(.js-packaging-unit-quantity-selector__add-to-cart-button:focus)',
                        groupAs: {
                            key: 'products',
                            toArray: true,
                        },
                        data: {
                            quantity: [
                                {
                                    selector: 'select[name="quantity"]',
                                    attribute: 'value',
                                },
                                {
                                    selector: '.js-formatted-number-input__hidden-input',
                                    attribute: 'value',
                                }
                            ],
                            price: {
                                selector: '[itemprop="price"]',
                                attribute: 'content',
                            },
                            sku: {
                                value: sku,
                            },
                        },
                    },
                ],
            }
        ]),
        data: events.data | merge({
            page: 'PDP',
            products: [{ sku: sku }],
            searchId: app.request.get('search-id'),
        }),
    } %}

    {{ parent() }}
{% endblock %}

{% block footerScripts %}
    {% widget 'AssetWidget' args ['pdp-footer'] only %}
    {% endwidget %}

    {{ parent() }}
{% endblock %}
