{# @var categoryNode \Generated\Shared\Transfer\CategoryNodeStorageTransfer #}

{% extends model('component') %}

{% define config = {
    name: 'filter-category-prepared',
} %}

{% define data = {
    filter: null,
    filterPath: null,
    categories: prepareFilterCategories(data.filter, data.category.node_id | default(0)),
    category: null,
    isEmptyCategoryFilterValueVisible: null,
    parentJsName: '',
} %}

{% block body %}
    <ul class="menu">
        {% block categoryList %}
            {% for categoryNode in data.categories %}
                {% if (categoryNode.quantity > 0) or (categoryNode.quantity == 0 and data.isEmptyCategoryFilterValueVisible) %}
                    {% set categoryNamePrepared = categoryNode.name | replace({'[^a-zA-Z0-9]': '_'}) %}
                    {% set childrenClass = categoryNode.hasChildren ? 'menu__item--has-children-list' %}
                    {% set isDisabled = categoryNode.quantity == 0 ? 'disabled' %}
                    {% set triggerClassName = config.jsName ~ '__category-trigger-' ~ categoryNamePrepared %}
                    {% set targetCategoryClassName = config.jsName ~ '__category-target-' ~ categoryNamePrepared %}
                    {% set targetTogglerClassName = config.jsName ~ '__toggler-target-' ~ categoryNamePrepared %}
                    {% set classToToggle = config.name ~ '__category-target' %}
                    {% set categoryTargetInner = config.name ~ '__category-target-inner' %}
                    {% set classToToggleModifier = classToToggle ~ '--hidden' %}
                    {% set toggleButtonClassName = config.name  ~ '__category-toggle-button' %}

                    {% block categoryItem %}
                        <li class="menu__item {{ config.name }}__menu-item">
                            <div class="grid">
                                {% if categoryNode.hasChildren %}
                                    {% block categoryItemToggler %}
                                        <div class="col">
                                            {% block categoryItemTogglerIcon %}
                                                <button type="button" class="link spacing-right--small {{ toggleButtonClassName }} {{ triggerClassName }} {{ targetTogglerClassName }}">
                                                    {% include atom('icon') with {
                                                        class: config.name ~ '__category-toggle-button-icon',
                                                        data: {
                                                            name: 'caret-down',
                                                        },
                                                    } only %}
                                                </button>
                                            {% endblock %}

                                            {% block categoryItemTogglerHandlers %}
                                                {% include molecule('toggler-click') with {
                                                    attributes: {
                                                        'trigger-class-name': triggerClassName,
                                                        'target-class-name': targetCategoryClassName,
                                                        'class-to-toggle': classToToggleModifier,
                                                    },
                                                } only %}

                                                {% include molecule('toggler-click') with {
                                                    attributes: {
                                                        'trigger-class-name': triggerClassName,
                                                        'target-class-name': targetTogglerClassName,
                                                        'class-to-toggle': toggleButtonClassName ~ '--collapsed',
                                                    },
                                                } only %}
                                            {% endblock %}
                                        </div>
                                    {% endblock %}
                                {% endif %}

                                {% block categoryRow %}
                                    <div class="col {{ config.name }}__category-row {{ not categoryNode.hasChildren ? config.name ~ '__category-row--no-children' }}">
                                        {% block categoryLink %}
                                            <button class="link {{ data.parentJsName ? data.parentJsName ~ '__trigger' }}" type="button" {{ isDisabled }} data-url={{ categoryNode.url }}>
                                                {{ categoryNode.name }} ({{ categoryNode.quantity | executeFilterIfExists('formatInt', app.locale) }})
                                            </button>
                                        {% endblock %}

                                        {% if categoryNode.hasChildren %}
                                            {% block categoryChildren %}
                                                <div class="{{ classToToggle }} {{ targetCategoryClassName }}">
                                                    <div class="{{ categoryTargetInner }}">
                                                        {% include molecule('filter-category', 'CatalogPage') with {
                                                            data: {
                                                                prepareFilterCategoriesDefined: data.prepareFilterCategoriesDefined,
                                                                filter: data.filter,
                                                                filterPath: data.filterPath,
                                                                categories: categoryNode.children,
                                                                isEmptyCategoryFilterValueVisible: data.isEmptyCategoryFilterValueVisible,
                                                                parentJsName: data.parentJsName,
                                                            },
                                                        } only %}
                                                    </div>
                                                </div>
                                            {% endblock %}
                                        {% endif %}
                                    </div>
                                {% endblock %}
                            </div>
                        </li>
                    {% endblock %}
                {% endif %}
            {% endfor %}
        {% endblock %}
    </ul>
{% endblock %}
