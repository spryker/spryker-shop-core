{% extends template('page-layout-checkout', 'CheckoutPage') %}

{% define data = {
    forms: {
        address: _view.addressesForm,
        shipping: _view.addressesForm.shippingAddress,
        billing: _view.addressesForm.billingAddress,
        items: _view.addressesForm.multiShippingAddresses | default([]),
        bundleItems: _view.addressesForm.multiShippingAddressesForBundleItems | default([]),
        billingSameAsShipping: _view.addressesForm.billingSameAsShipping,
    },
    backUrl: _view.previousStepUrl,
    isMultipleShipmentEnabled: _view.addressesForm.isMultipleShipmentEnabled.vars.value,
    title: 'checkout.step.address.title' | trans,
    hasCustomerAddresses: _view.hasCustomerAddresses | default(false),
} %}

{% block content %}
    {% set companyBusinessUnitShippingAddressWidget = findWidget('CompanyBusinessUnitAddressWidget', ['shippingAddress', data.forms.shipping.vars.data]) %}
    {% set isCompanyBusinessUnitShippingAddressApplicable = companyBusinessUnitShippingAddressWidget and companyBusinessUnitShippingAddressWidget.isApplicable %}
    {% set jsAddressClass = 'js-address' %}
    {% set formSubmitClassName = jsAddressClass ~ '__form-submit' %}
    {% set billingSameAsShippingData = data.forms.billingSameAsShipping.vars.data %}

    {% embed molecule('form') with {
        class: 'box',
        data: {
            title: 'page.checkout.address.shipping-address' | trans,
            form: data.forms.address,
            backUrl: data.backUrl,
            submit: {
                enable: true,
                text: 'general.next.button' | trans,
                class: 'button button--saccess ' ~ formSubmitClassName,
            },
        },
        embed: {
            forms: {
                shipping: data.forms.shipping,
                billing: data.forms.billing,
                items: data.forms.items,
                bundleItems: data.forms.bundleItems,
            },
            isMultipleShipmentEnabled: data.isMultipleShipmentEnabled,
            companyBusinessUnitShippingAddressWidget: companyBusinessUnitShippingAddressWidget,
            isCompanyBusinessUnitShippingAddressApplicable: isCompanyBusinessUnitShippingAddressApplicable,
            jsAddressClass: jsAddressClass,
            isBillingSameAsShippingChecked: billingSameAsShippingData is not defined or billingSameAsShippingData,
            formSubmitClassName: formSubmitClassName,
        },
    } only %}
        {% block fields %}
            {% set hasShippingAddresses = data.form.shippingAddress.id_customer_address is defined %}
            {% set hasCompanyUnitAddresses = data.form.shippingAddress.id_company_unit_address is defined %}
            {% set hasShippingAddressesAndApplicable = embed.isCompanyBusinessUnitShippingAddressApplicable ?: hasShippingAddresses %}
            {% set hiddenClassName = 'is-hidden' %}
            {% set validatorTriggerClassName = embed.jsAddressClass ~ '__validator-trigger' %}
            {% set shippingValidationContainerClassName = embed.jsAddressClass ~ '__shipping-validation-container' %}
            {% set shippingClassName = embed.jsAddressClass ~ '__shipping' %}
            {% set multishipmentTargetClassName = embed.jsAddressClass ~ '__items-target' %}
            {% set validatorClassName = embed.jsAddressClass ~ '__validate-next-checkout-step' %}
            {% set multishipmentValidatorClassName = embed.jsAddressClass ~ '__multishipment-validate-next-checkout-step' %}
            {% set billingSameAsShippingContainerClassName = embed.jsAddressClass ~ '__billing-same-as-shipping-container' %}
            {% set billingSameAsShippingClassName = embed.jsAddressClass ~ '__billing-same-as-shipping' %}
            {% set selectBillingAddressClassName = embed.jsAddressClass ~ '__form-select-billingAddress' %}
            {% set billingClassName = embed.jsAddressClass ~ '__billing' %}
            {% set billingFormClassName = embed.jsAddressClass ~ '__billing-form' %}

            <div class="grid col col--sm-12 {{ embed.jsAddressClass }}__form-handler-shippingAddress">
                {% set deliveryContainerClassName = embed.jsAddressClass ~ '__delivery' %}

                {% if hasShippingAddressesAndApplicable %}
                    {% set singleDeliveryContainerClassName = embed.jsAddressClass ~ '__single-delivery' %}
                    {% set deliverySelectClassName = embed.jsAddressClass ~ '__form-select-shippingAddress' %}
                    {% set hasShipmentTypes = data.form.shipmentType is defined %}
                    {% set defaultShipmentType = 'delivery' %}
                    {% set currentShipmentType = data.form.shipmentType.key.vars.value | default %}
                    {% set isDefaultShipmentType = currentShipmentType == defaultShipmentType %}
                    {% set shipmentTypeHiddenClassName = hasShipmentTypes and not isDefaultShipmentType ? hiddenClassName %}
                    {% set shippingAddressValue = embed.forms.shipping.id_customer_address.vars.value %}
                    {% set optionValueDeliverToMultipleAddresses = '-1' %}
                    {% set isMultipleShipmentSelected = shippingAddressValue == optionValueDeliverToMultipleAddresses %}
                    {% set isAddressSelected = shippingAddressValue is not empty and shippingAddressValue != '0' %}
                    {% set singleDeliveryContainerHiddenClassName = hasShipmentTypes and isMultipleShipmentSelected ? hiddenClassName %}

                    {% if embed.isCompanyBusinessUnitShippingAddressApplicable %}
                        {% set isAddressSelected = isAddressSelected or embed.forms.shipping.id_company_unit_address.vars.value is not empty %}
                    {% endif %}                

                    <div class="form__field col col--sm-6">
                        {% block multipleShipmentToggler %}
                            {% if embed.isMultipleShipmentEnabled and hasShipmentTypes %}
                                {% include molecule('multiple-shipment-toggler', 'CheckoutPage') with {
                                    class: 'spacing-y',
                                    data: {
                                        isMultipleShipmentSelected: isMultipleShipmentSelected,
                                    },
                                    attributes: {
                                        'toggle-targets-class-name': singleDeliveryContainerClassName,
                                        'select-class-name': deliverySelectClassName,
                                    },
                                } only %}
                            {% endif %}
                        {% endblock %}

                        <div class="{{ singleDeliveryContainerClassName }} {{ singleDeliveryContainerHiddenClassName }} spacing-y">
                            {% block shipmentTypeSelector %}
                                {% widget 'ShipmentTypeAddressFormWidget' args [data.form] with {
                                    data: {
                                        deliveryContainerClassName: deliveryContainerClassName,
                                        billingSameAsShippingContainerClassName: billingSameAsShippingContainerClassName,
                                        shipmentTypesClassName: validatorTriggerClassName,
                                        servicePointClassName: shippingValidationContainerClassName,
                                        deliverySelectClassName: deliverySelectClassName,
                                    },
                                } only %}
                                    {% block body %}
                                        <div class="spacing-y">
                                            {{ parent() }}
                                        </div>
                                    {% endblock %}
                                {% endwidget %}
                            {% endblock %}

                            <div class="{{ deliveryContainerClassName }} {{ shipmentTypeHiddenClassName }} spacing-y">
                                {% if embed.isCompanyBusinessUnitShippingAddressApplicable %}
                                    {% widget embed.companyBusinessUnitShippingAddressWidget with {
                                        data: {
                                            itemShippingTriggerJsClass: deliveryContainerClassName ~ ' ' ~ shipmentTypeHiddenClassName,
                                            isMultipleShipmentEnabled: embed.isMultipleShipmentEnabled,
                                            items: embed.forms.items,
                                            jsAddressClass: embed.jsAddressClass,
                                        },
                                    } only %}
                                    {% endwidget %}

                                    {% if hasShippingAddresses %}
                                        {% do data.form.shippingAddress.id_customer_address.setRendered %}
                                    {% endif %}

                                    {% if hasCompanyUnitAddresses %}
                                        {% do data.form.shippingAddress.id_company_unit_address.setRendered %}
                                    {% endif %}

                                {% else %}
                                    {{ form_row(embed.forms.shipping.id_customer_address, {
                                        label: 'page.checkout.address.delivery.address_select' | trans,
                                        component: molecule('select'),
                                        attr: {
                                            class: deliverySelectClassName,
                                        },
                                    }) }}
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endif %}

                <div class="{{ deliveryContainerClassName }} {{ shipmentTypeHiddenClassName }}">
                    {% include molecule('form') with {
                        class: shippingClassName ~ ' ' ~ shippingValidationContainerClassName ~ ' ' ~ (isAddressSelected ? hiddenClassName),
                        data: {
                            form: embed.forms.shipping,
                            enableStart: false,
                            enableEnd: false,
                            layout: {
                                salutation: 'col col--sm-12 col--lg-2',
                                first_name: 'col col--sm-12 col--lg-5',
                                last_name: 'col col--sm-12 col--lg-5',
                                address1: 'col col--sm-12 col--md-8 col--lg-10',
                                address2: 'col col--sm-12 col--md-4 col--lg-2',
                                zip_code: 'col col--sm-6 col--lg-4',
                                city: 'col col--sm-6 col--lg-4',
                                iso2_code: 'col col--sm-12 col--lg-4',
                            },
                        },
                    } only %}
                </div>
            </div>

            {% if embed.isMultipleShipmentEnabled %}
                {% include molecule('address-item-form', 'CheckoutPage') with {
                    class: multishipmentTargetClassName ~ ' col col--sm-12 ' ~ (not isMultipleShipmentSelected ? hiddenClassName),
                    data: {
                        form: embed.forms.items,
                        formBundle: embed.forms.bundleItems,
                        shippingForm: embed.forms.shipping,
                        jsAddressClass: embed.jsAddressClass,
                        hiddenClassName: hiddenClassName,
                        validatorClassName: multishipmentValidatorClassName,
                    },
                } only %}
            {% endif %}

            <div class="col col--sm-12 {{ billingSameAsShippingContainerClassName }} {{ shipmentTypeHiddenClassName }}">
                <div class="form__field {{ billingSameAsShippingClassName }} {{ isMultipleShipmentSelected ? hiddenClassName }}">
                    {{ form_row(data.form.billingSameAsShipping, {
                        component: molecule('toggler-checkbox'),
                        attributes: {
                            'target-selector': '.' ~ billingClassName,
                            'class-to-toggle': hiddenClassName,
                            'add-class-when-checked': true,
                            'checked': not isMultipleShipmentSelected ? embed.isBillingSameAsShippingChecked : false,
                        },
                    }) }}
                </div>
            </div>

            <div class="grid col col--sm-12 {{ embed.jsAddressClass }}__form-handler-billingAddress">
                {% embed molecule('form') with {
                    class: billingClassName ~ ' form--extend spacing-top spacing-top--big ' ~ (not isMultipleShipmentSelected ? hiddenClassName),
                    data: {
                        title: 'page.checkout.address.billing-address' | trans,
                        form: embed.forms.billing,
                        enableStart: false,
                        enableEnd: false,
                        layout: {
                            salutation: 'col col--sm-12 col--lg-2',
                            first_name: 'col col--sm-12 col--lg-5',
                            last_name: 'col col--sm-12 col--lg-5',
                            address1: 'col col--sm-8 col--lg-10',
                            address2: 'col col--sm-4 col--lg-2',
                            zip_code: 'col col--sm-6 col--lg-4',
                            city: 'col col--sm-6 col--lg-4',
                            iso2_code: 'col col--sm-12 col--lg-4',
                        },
                    },
                    embed: {
                        jsAddressClass: embed.jsAddressClass,
                        hiddenClassName: hiddenClassName,
                        billingFormClassName: billingFormClassName,
                        selectBillingAddressClassName: selectBillingAddressClassName,
                    },
                } only %}
                    {% block fields %}
                        {% set companyBusinessUnitBillingAddressWidget = findWidget('CompanyBusinessUnitAddressWidget', ['billingAddress', data.form.vars.data]) %}
                        {% set isCompanyBusinessUnitBillingAddressApplicable = companyBusinessUnitBillingAddressWidget and companyBusinessUnitBillingAddressWidget.isApplicable %}
                        {% set hasBillingAddresses = data.form.id_customer_address is defined %}
                        {% set hasCompanyUnitBillingAddresses = data.form.id_company_unit_address is defined %}
                        {% set hasBillingAddressesAndApplicable = isCompanyBusinessUnitBillingAddressApplicable ?: hasBillingAddresses %}
                        {% set billingAddressValue = data.form.id_customer_address.vars.value %}
                        {% set isAddressSelected = billingAddressValue is not empty and billingAddressValue != '0' %}

                        {% if hasCompanyUnitBillingAddresses %}
                            {% set isAddressSelected = isAddressSelected or data.form.id_company_unit_address.vars.value is not empty %}
                        {% endif %}

                        {% if hasBillingAddressesAndApplicable %}
                            <div class="form__field col col--sm-6">
                                <ul class="list spacing-y">
                                    {% if isCompanyBusinessUnitBillingAddressApplicable %}
                                        {% widget companyBusinessUnitBillingAddressWidget with {
                                            data: {
                                                jsAddressClass: embed.jsAddressClass,
                                            }
                                        } only %}
                                        {% endwidget %}

                                        {% if hasBillingAddresses %}
                                            {% do data.form.id_customer_address.setRendered %}
                                        {% endif %}

                                        {% if hasCompanyUnitBillingAddresses %}
                                            {% do data.form.id_company_unit_address.setRendered %}
                                        {% endif %}

                                    {% else %}
                                        <li class="list__item spacing-y">
                                            {{ form_row(data.form.id_customer_address, {
                                                label: 'page.checkout.address.billing.address_select' | trans,
                                                component: molecule('select'),
                                                attr: {
                                                    class: embed.selectBillingAddressClassName,
                                                },
                                            }) }}
                                        </li>
                                    {% endif %}
                                </ul>
                            </div>
                        {% endif %}

                        <div class="{{ embed.billingFormClassName }} {{ isAddressSelected ? embed.hiddenClassName }}">
                            {{ parent() }}
                        </div>
                    {% endblock %}
                {% endembed %}
            </div>

            {% include molecule('is-next-checkout-step-enabled', 'CheckoutPage') with {
                attributes: {
                    'trigger-selector': '.' ~ deliverySelectClassName,
                    'target-selector': '.' ~ multishipmentValidatorClassName,
                    'extra-target-selector': '.' ~ validatorClassName,
                },
            } only %}

            {% include molecule('validate-next-checkout-step', 'CheckoutPage') with {
                class: validatorClassName,
                attributes: {
                    'container-selector': '.' ~ shippingValidationContainerClassName,
                    'extra-container-selector': '.' ~ deliveryContainerClassName,
                    'target-selector': '.' ~ embed.formSubmitClassName,
                    'dropdown-trigger-selector': '.' ~ deliverySelectClassName ~ ':not(.' ~ hiddenClassName ~ ')',
                    'extra-triggers-class-name': validatorTriggerClassName,
                    'parent-target-class-name': singleDeliveryContainerClassName,
                    'is-enable': false,
                },
            } only %}

            {% include molecule('address-form-toggler', 'CustomerPage') ignore missing with {
                attributes: {
                    'trigger-selector': '.' ~ deliverySelectClassName,
                    'target-selector': '.' ~ shippingClassName,
                    'sub-target-selector': '.' ~ multishipmentTargetClassName,
                    'container-billing-address-selector': '.' ~ billingClassName,
                    'billing-same-as-shipping-selector': '.' ~ billingSameAsShippingClassName,
                    'billing-same-as-shipping-toggler-selector': '[name="addressesForm[billingSameAsShipping]"]',
                    'toggle-option-value': optionValueDeliverToMultipleAddresses,
                    'parent-target-class-name': singleDeliveryContainerClassName,
                },
            } only %}

            {% include molecule('address-form-toggler', 'CustomerPage') ignore missing with {
                attributes: {
                    'trigger-selector': '.' ~ selectBillingAddressClassName,
                    'target-selector': '.' ~ billingFormClassName,
                },
            } only %}
        {% endblock %}

        {% block actions %}
            <div class="grid grid--middle grid--right">
                <div class="col">
                    {% widget 'QuoteRequestActionsWidget' args [data.form.vars.value, data.backUrl] only %}
                        {% block saveButton %}{% endblock %}
                        {% block backButton %}{% endblock %}
                    {% endwidget %}

                    {{ parent() }}
                </div>
            </div>
        {% endblock %}
    {% endembed %}
{% endblock %}
